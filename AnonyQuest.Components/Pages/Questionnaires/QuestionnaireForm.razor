@using System.ComponentModel.DataAnnotations;
@inject IJSRuntime js

<div class="col-md-12">
    <fieldset disabled="@Questionnaire.HasStarted">
        <EditForm Model="@Questionnaire" OnValidSubmit="OnDataAnnotationsValidated">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="form-group col-md-6">
                    <label>Título:</label>
                    <div>
                        <InputText class="form-control" @bind-Value="@Questionnaire.Title" />
                        <ValidationMessage For="@(() => Questionnaire.Title)" />
                    </div>
                </div>
                <div class="form-group col-md-3">
                    <label>Data Limite:</label>
                    <div>
                        <input type="datetime-local" @onchange="@(() => EndDateSelected())" id="endDate" />
                    </div>
                </div>
                <div class="col-md-3">
                    &nbsp;
                </div>
            </div>
            <div class="row">
                @if (AnyInvalidEmail)
                {
                    <span class="text-danger">Preencha o campo de acordo ao especificado</span>
                }
                <div class="form-group col-md-8">
                    <label>Destinatários:</label>
                    <div>
                        <InputTextArea class="form-control" @bind-Value="@ReceivingEmails" placeholder="Insira os emails separados apenas por ;" />
                    </div>
                </div>
                <div class="col-md-4">
                    &nbsp;
                </div>
            </div>
            <div class="col-md-6">
                <button class="btn btn-primary my-3" type="submit">Salvar Mudanças</button>
                <button class="btn btn-success my-3 ml-2" type="button" disabled="@Questionnaire.HasStarted" @onclick="SendQuestionnaire">Enviar &nbsp;<i class="oi oi-envelope-closed"></i></button>
            </div>

            <h2>Perguntas: <button class="btn btn-secondary my-3 ml-2" type="button" disabled="@Questionnaire.HasStarted" @onclick="CreateQuestion"><i class="oi oi-plus"></i></button></h2>
            <hr />
            @if (AnyInvalidQuestions)
            {
                <span class="text-danger">Para envio direto do questionário, não pode haver questões em branco</span>
            }
            @foreach (var question in Questionnaire.Questions)
            {
                <div class="row">
                    <div class="col-md-11">
                        <div>
                            <InputTextArea class="form-control" placeholder="Inclua o enunciado da pergunta" @bind-Value="@question.Description" />
                        </div>
                    </div>
                    <div class="col-md-1" style="display:flex; align-items:center;">
                        <button class="btn btn-danger" type="button" disabled="@Questionnaire.HasStarted" @onclick="() => RemoveQuestion(question)"><i class="oi oi-trash"></i></button>
                        @if (question.Answers != null && question.Answers.Any())
                        {
                            <span class="btn btn-info" style="margin-left:5px" type="button" @onclick="() => question.ShowAnswers = !question.ShowAnswers"><i class="oi oi-circle-check"></i></span>
                        }
                    </div>
                </div>
                <div class=@(question.ShowAnswers ? "" : "collapse")>
                    @if (question.Answers != null)
                    {
                        foreach (var answer in question.Answers)
                        {
                            <div class="row">
                                <div class="col-md-11">
                                    <div style="position:relative">
                                        <div style="position:absolute; padding-left:5px">Resposta #@question.Answers.IndexOf(answer):</div>
                                        <InputTextArea style="padding-top:20px; margin-top:5px" class="form-control" disabled="@(answer.FinalAnswer)" placeholder="Resposta" @bind-Value="@answer.Description" />
                                    </div>
                                </div>
                            </div>
                            <hr />
                        }
                    }
                </div>
            }
        </EditForm>
    </fieldset>
</div>

@code {
    [Parameter] public Questionnaire Questionnaire { get; set; }
    [Parameter] public EventCallback<Questionnaire> OnValidSubmit { get; set; }
    [Parameter] public EventCallback<Questionnaire> OnValidSendQuestionnaire { get; set; }

    private bool AnyInvalidEmail;
    private bool AnyInvalidQuestions;
    private string ReceivingEmails = "";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (Questionnaire.Questions.Any())
            {
                ReceivingEmails = string.Join(";", Questionnaire.Destinatary);
                StateHasChanged();
            }
            else
            {
                CreateQuestion();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Questionnaire.EndDate != DateTime.MinValue)
        {
            string selectedDateAsString = Questionnaire.EndDate.ToString("yyyy-MM-ddTHH:mm");

            await js.InvokeVoidAsync("customizationJsFunctions.setSelectedDate", selectedDateAsString);
        }
    }

    private async Task OnDataAnnotationsValidated()
    {
        if (IsValidEntry())
        {
            await OnValidSubmit.InvokeAsync(null);
        }
    }

    private async Task SendQuestionnaire()
    {
        if (string.IsNullOrEmpty(ReceivingEmails))
        {
            AnyInvalidEmail = true;
            return;
        }

        if (IsValidEntry() && ContainsValidQuestions())
        {
            Questionnaire.HasStarted = true;
            await OnValidSendQuestionnaire.InvokeAsync(null);
        }
    }

    private bool IsValidEntry()
    {
        var emailList = ReceivingEmails.Split(';').Select(s => s.Trim()).ToList();
        var ReceiverList = new List<ReceiverQuestionnaire>();

        foreach (var email in emailList)
        {
            if (!IsValidEmail(email) && !string.IsNullOrEmpty(email))
            {
                AnyInvalidEmail = true;
                return false;
            }
            ReceiverList.Add(new ReceiverQuestionnaire() { ReceiverEmail = email });
        }

        AnyInvalidEmail = false;
        Questionnaire.ReceiverQuestionnaires = ReceiverList;
        return true;
    }

    private bool IsValidEmail(string source)
    {
        return new EmailAddressAttribute().IsValid(source);
    }

    private bool ContainsValidQuestions()
    {
        foreach (var question in Questionnaire.Questions)
        {
            if (string.IsNullOrEmpty(question.Description))
            {
                return false;
            }
        }
        return true;
    }

    private void CreateQuestion()
    {
        Questionnaire.Questions.Add(
            new Question
            {
                CreatedDate = DateTime.Now,
                LatestEditDate = DateTime.Now
            }
        );
        StateHasChanged();
    }

    private void RemoveQuestion(Question question)
    {
        Questionnaire.Questions.Remove(question);
    }



    protected async void EndDateSelected()
    {
        string selectedDateAsString = await js.InvokeAsync<string>("customizationJsFunctions.getSelectedDate");
        try
        {
            Questionnaire.EndDate = Convert.ToDateTime(selectedDateAsString);
        }
        catch
        {
            Questionnaire.EndDate = DateTime.Now;
        }
        StateHasChanged();
    }
}


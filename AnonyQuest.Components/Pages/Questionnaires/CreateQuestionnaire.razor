@page "/questionnaire/create"
@inject NavigationManager navigationManager
@inject IRepository<Questionnaire> questionnaireRepository
@inject IAuthenticationStateService authService
@attribute [Authorize]


<h3>Criar Questionário</h3>

<div class="col-md-12">
    <div class="row">
        <div class="col-md-3">
            <label>Autor:</label>
            <input type="email" name="AuthorEmail" disabled="disabled" placeholder="@AuthorEmail">
        </div>
    </div>
    <div class="row">
        <div class="col-md-9">
            <QuestionnaireForm Questionnaire="@Questionnaire" OnValidSubmit="SaveQuestionnaire" OnValidSendQuestionnaire="SendQuestionnaire"/>
        </div>
    </div>
</div>

@code {

    private Questionnaire Questionnaire = new Questionnaire();
    private string AuthorEmail;

    protected async override Task OnInitializedAsync()
    {
        AuthorEmail = await authService.GetCurrentUserEmail();
        Questionnaire.AuthorEmail = AuthorEmail;
        Questionnaire.CreatedDate = DateTime.Now;
        Questionnaire.EndDate = DateTime.ParseExact(DateTime.Now.ToString("dd/MM/yyyy HH:mm"), "dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture);
        Questionnaire.Questions = new List<Question>();
    }

    private async Task SaveQuestionnaire()
    {
        try
        {
            var questionnaire = await questionnaireRepository.AddAsync(Questionnaire);
            await questionnaireRepository.SaveChangesAsync();
            questionnaire.Destinatary = questionnaire.ReceiverQuestionnaires == null ? new List<string>() : questionnaire.ReceiverQuestionnaires?.Select(x => x.UserEmail).ToList();
            navigationManager.NavigateTo($"/");
        }
        catch (Exception ex)
        {

        }
    }

    private async Task SendQuestionnaire()
    {
        try
        {
            var questionnaire = await questionnaireRepository.AddAsync(Questionnaire);
            await questionnaireRepository.SaveChangesAsync();
            questionnaire.Destinatary = questionnaire.ReceiverQuestionnaires == null ? new List<string>() : questionnaire.ReceiverQuestionnaires?.Select(x => x.UserEmail).ToList();
            navigationManager.NavigateTo($"/");
        }
        catch (Exception)
        {

        }
    }
}
